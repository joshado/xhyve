# 
# Copyright (c) 2016 Thomas Haggett
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THOMAS HAGGETT ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL NETAPP, INC OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 

file 'multiboot.c'
file 'multiboot.o' => 'multiboot.c' do
  sh "gcc -m32 -c multiboot.c -o multiboot.o -std=gnu99 -ffreestanding -O2 -Wall -Wextra"
end

file 'multiboot.bin' => 'multiboot.o' do
  sh "gcc -Wl,-no_pie -m32 -ffreestanding -o multiboot.bin multiboot.o"
end

task :clean do
  sh "rm -f *.o"
end

QEMU_CMD = "qemu-system-x86_64 -serial stdio -net nic -net user,bootfile=multiboot.bin,tftp=./ -boot n"
task :qemu => 'multiboot.bin' do
  sh "#{QEMU_CMD} -nographic"
end

task :qemu_graphics => 'multiboot.bin' do
  sh QEMU_CMD
end

# Using specification document:
#    https://www.gnu.org/software/grub/manual/multiboot/multiboot.html#OS-image-format
class MultibootImage
  def initialize(path)
    @path = path
  end

  FLAG_BITS = {
    0  => "Boot modules must be page (4K) aligned",
    1  => "mem_* fields of Multiboot information structure must be provided",
    2  => "video mode table info must be made available",
    16 => "Multiboot image placement headers are valid"
  }

  def parse
    File.open(@path, "rb") do |f|
      @buffer = f.read(8192)
    end

    # > An OS image must contain an additional header called Multiboot header,
    # > besides the headers of the format used by the OS image. The Multiboot
    # > header must be contained completely within the first 8192 bytes of the
    # > OS image, and must be longword (32-bit) aligned. In general, it should
    # > come as early as possible, and may be embedded in the beginning of the
    # > text segment after the real executable header.

    # Scan through the first 8192 bytes, at 32-bit hops, looking for the magic,
    # then calculate and verify the checksum.
    header_offset = (0..8192).find do |i|
      fragment = @buffer[i,12]
      raise "Ran out of file looking for multiboot header" if fragment.nil?

      @magic, @flags, @checksum = fragment.unpack("LLL")

      @magic == 0x1BADB002 &&
        (@magic + @flags + @checksum) % (2**32) == 0
    end
    raise "Cannot find multiboot header in first 8192 bytes" unless header_offset
    raise "Header offset is not 32-bit aligned (0x#{header_offset.to_s(16)} #{header_offset % 4}) :(" unless header_offset % 4 == 0

    puts "Header at #{header_offset}"
    puts "Magic: #{@magic.to_s(16)}"
    puts "Flags: #{@flags.to_s(16)}"
    puts "Checksum: #{@checksum.to_s(16)}"

    puts "Flags set: (#{@flags.to_s(2)})"
    FLAG_BITS.each do |bit,str|
      puts " * bit #{bit}: #{str}" if (@flags & (1<<bit)) > 0
    end

    # If there is an image offset header, parse it!
    if @flags & (1<<16) > 0

      puts "Parsing offset header:"
      _, _ , _, @header_addr, @load_addr, @load_end_addr, @bss_end_addr, @entry_addr = @buffer[header_offset, 32].unpack("LLLLLLLL")

      puts " * Header addr is    #{@header_addr.to_s(16)}"
      puts " * Load addr is      #{@load_addr.to_s(16)}"
      puts " * Load end addr is  #{@load_end_addr.to_s(16)}"
      puts " * Bss end addr is   #{@bss_end_addr.to_s(16)}"
      puts " * Entry addr is     #{@entry_addr.to_s(16)}"
    end
  end
end

task :sanity do
  image = MultibootImage.new('unix')
  image.parse
end

task :check => 'multiboot.bin' do
  puts "Checking 'multiboot.bin'..."
  image = MultibootImage.new('multiboot.bin')
  image.parse
end